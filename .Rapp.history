h2c(hh.camera1[100,])
??sobel
??hough
?nan
?is.nan
A = data.frame(Length = c(4,3,5,6,3), Width = c(8,NA,2,NA,2), Depth = c(1,1,2,NA,3))
A
A = data.frame(Length = c(4,3,5,6,3), Width = c(8,4,2,4,2), Depth = c(1,1,2,2,3))
A
A[c(1,3),]
A[c(1,3),c(2,4)]
A[,c(2,4,5)]
A[c(2,4,5),]
A[,c(1,3)]
?list
A["Width"]
B = list(age = c(5,6,7,5), weather = c("cloudy"), colour = c("green", "white", "white", "blue", "grey"))
B
B[1]
B[[1]]
B$age
B[[1]] + 1
B[1] + 1
A[c(2,4,5),c(1,3)]
?print
print("Hello world")
t <-c (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,6,7,8,9)
hist(t, xlab="Brains per Round", ylab="Frequency of Scores",#
main="Distribution of Brains per Round", col="gray", breaks=seq(from=-0.5, #
by=1, to=9.5))
library('e1071')
?svm
data(iris)#
attach(iris)
iris[1:10,]
library(kernlab)
install.packages(kernlab)
install.packages('kernlab')
?glm
725 + 40
725 + 40 + 8324 + 9032
725 + 8324
a = 725 + 40 + 8324 + 9032
(725 + 8324)/a
(725 + 40)/a
(725)/a
0.9*0.03 + 0.02*0.97
0.9*0.03/0.0464
?sample
sample(3,100, replace=TRUE, prob=(1,2,3))
sample(3,100, replace=TRUE, prob=c(1,2,3))
green = sample(3,100, replace=TRUE, prob=c(1,2,3))
red = sample(3,100, replace=TRUE, prob=c(3,2,1))
table(green,red)
diff(pnorm(c(150,160), mean = 160, sd = 15))
pnorm(160), mean = 160, sd = 15) - pnorm(150), mean = 160, sd = 15)
pnorm(160, mean = 160, sd = 15) - pnorm(150, mean = 160, sd = 15)
x = rnorm(50,1,10)
y = rnorm(50,1,5)
var(x + y)
var(c(x,y))
?cor
?t.test
x = 123
x = 1:4
y = 1:4
summary(lm(x ~ y))
A  = matrix(runif(20),4,5)
A
sum
apply(A,1,sum)
apply(A,2,sum)
A  = matrix(rpois(20, lambda=1),4,5)
A
A[1,] > 0
sum(A[1,] > 0)
csum = function(x) { sum(x > 0) }
csum(A[1,] > 0)
apply(A,1,csum)
?papply(A,1,csum)
?apply(A,1,csum)
??papply(A,1,csum)
csum = function(x) { s = sum(x > 0); return s; }
csum = function(x) { s = sum(x > 0); return(s); }
10/14
10/14*7.5
10/14*7.5 + 70
70 + 8/14*10
n = 10
p = 0.51
1 - pbinom(5, n, p)
n = 100
1 - pbinom(5, n, p)
1 - pbinom(n/2, n, p)
plot(pbinom(0:10, n, p))
plot(dbinom(0:10, n, p))
m
n
n = 10
plot(dbinom(0:10, n, p))
n*p
n = 100
plot(dbinom(0:n, n/2, p))
n
p
n/2
plot(dbinom(0:n, n, p))
setwd("Projects/rao/iVAT-missing/")
iris
labels(iris)
iris[-Species]
?subset
subset(iris, drop = Species)
subset(iris, select = -Species)
labels(subset(iris, select = -Species))
subset(iris, select = -Species)
source("iVAT.r")#
#
# set the number of missing values#
missing = 200#
X = cbind(rnorm(50, mean=10, sd = 5),rnorm(50, mean=10, sd = 5))#
Y = cbind(rnorm(50, mean=110, sd = 5),rnorm(50, mean=110, sd = 5))#
Z = rbind(X,Y)#
#
Z = subset(iris, select = -Species)#
#
# randomise positions#
d = dim(Z)#
#Z = Z[sample(d[1], d[1], replace = FALSE),]#
#
# compute distance matrix#
D = as.matrix(dist(Z))
dim(D)
V = iVAT(D)
image(V)
image(V$RiV)
image(V$RV)
image(V$RiV)
source("simple-data.r")
source("simple-data.r")
source("simple-data.r")
source("simple-data.r")
source("simple-data.r")
source("simple-data.r")
source("simple-data.r")
source("simple-data.r")
labels(iris)
setwd("~/Documents/mydeck/")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify('slides.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide'))
slidify('slides.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide'))
?slidify
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
norm
?norm
vnorm
yu
truth
prediction.error <- function(D, E, replace.method) {#
#
  points = find.missing(E)#
  truth = sapply(points, value.at.position, D)#
#
  y = compute.missing(E,replace.method)#
  return(vnorm(y,truth))#
#
}
prediction.error(D, E, uniform.predict.point)
vnorm <- function(x,y) {#
  return(sqrt((x - y)^2))#
}
prediction.error(D, E, uniform.predict.point)
vnorm <- function(x,y) {#
  return(sqrt(sum((x - y)^2)))#
}
prediction.error(D, E, uniform.predict.point)
prediction.error(D, E, uniform.predict.point)
prediction.error(D, E, uniform.predict.point)
prediction.error(D, E, uniform.predict.point)
prediction.error(D, E, uniform.predict.point)
prediction.error(D, E, uniform.predict.point)
prediction.error(D, E, uniform.predict.point)
prediction.error(D, E, ks.predict.point)
prediction.error(D, E, lm.predict.point)
rms <- function(x,y) {#
  return(sqrt(mean((x - y)^2)))#
}
prediction.error <- function(D, E, replace.method) {#
#
  points = find.missing(E)#
  truth = sapply(points, value.at.position, D)#
#
  y = compute.missing(E,replace.method)#
  return(rms(y,truth))#
#
}
prediction.error(D, E, lm.predict.point)
range(D)
range(D)
range(D)
prediction.error(D, E, lm.predict.point)
prediction.error(D, E, lm.predict.point)
prediction.error(D, E, ks.predict.point)
prediction.error(D, E, ks.predict.point)
prediction.error(D, E, ks.predict.point)
?sapply
replicate(10, prediction.error(D, E, ks.predict.point))
replicate(10, prediction.error(D, E, uniform.predict.point))
prediction.error <- function(D, replace.method) {#
#
  d = dim(D)#
  point = random.points(d, missing)#
  E = D#
  E[point] = NA#
#
  points = find.missing(E)#
  truth = sapply(points, value.at.position, D)#
#
  y = compute.missing(E,replace.method)#
  return(rms(y,truth))#
#
}
replicate(10, prediction.error(D, uniform.predict.point))
error.u = replicate(100, prediction.error(D, uniform.predict.point))
hist(error.u)
error.b = replicate(100, prediction.error(D, bootstrap.predict.point))
hist(error.b)
error.l = replicate(100, prediction.error(D, lm.predict.point))
missing
d
replicate(5, random.points(d, 4))
replicate(5, random.points(d, 4))[1]
replicate(5, random.points(d, 4))[1,,]
replicate(5, random.points(d, 4))[,,1]
point.set <- function(sample.size, missing) {#
  return(replicate(sample.size, random.points(d, missing)))#
}
point.set <- function(sample.size, missing, d) {#
  return(replicate(sample.size, random.points(d, missing)))#
}
pset = point.set(sample.size = 100, missing, d)
pset[,,1]
dim(pset)
prediction.error <- function(D, replace.method, point) {#
#
  E = D#
  E[point] = NA#
#
  points = find.missing(E)#
  truth = sapply(points, value.at.position, D)#
#
  y = compute.missing(E,replace.method)#
  return(rms(y,truth))#
#
}
prediction.error <- function(point, D, replace.method) {#
#
  E = D#
  E[point] = NA#
#
  points = find.missing(E)#
  truth = sapply(points, value.at.position, D)#
#
  y = compute.missing(E,replace.method)#
  return(rms(y,truth))#
#
}
error.u2 = apply(pset, 3, prediction.error, D, uniform.predict.point)
length(error.u2)
hist(error.u2)
error.u2
error.b = apply(pset, 3, prediction.error, D, bootstrap.predict.point)
hist(error.b)
error.l = apply(pset, 3, prediction.error, D, lm.predict.point)
warnings()
error.l
hist(error.l)
error.k = apply(pset, 3, prediction.error, D, ks.predict.point)
hist(error.k)
error.k
summary(error.k)
summary(error.l)
summary(error.u)
summary(error.b)
error.k - error.u
range(error.k - error.u)
pset = point.set(sample.size = 100, missing, d)#
error.u = apply(pset, 3, prediction.error, D, uniform.predict.point)#
error.b = apply(pset, 3, prediction.error, D, bootstrap.predict.point)#
error.l = apply(pset, 3, prediction.error, D, lm.predict.point)#
error.k = apply(pset, 3, prediction.error, D, ks.predict.point)
hist(error.u)
hist(error.b)
hist(error.l)
hist(error.k)
summary(error.l)
summary(error.u)
hist(error.k)
par(mfrow = c(2,2))#
hist(error.u, main = "MSE of Replacement: Uniform")#
hist(error.b, main = "MSE of Replacement: Bootstrap")#
hist(error.l, main = "MSE of Replacement: Linear")#
hist(error.k, main = "MSE of Replacement: Kernel")
summary(list(Uniform = error.u, Bootstrap = error.b, Linear = error.l, Kernel = error.k))
summary(error.u)
sapply(list(Uniform = error.u, Bootstrap = error.b, Linear = error.l, Kernel = error.k), summary)
pdf("iVAT-missing-values-error.pdf", width = 10, height = 10)#
par(mfrow = c(2,2))#
hist(error.u, main = "MSE of Replacement: Uniform")#
hist(error.b, main = "MSE of Replacement: Bootstrap")#
hist(error.l, main = "MSE of Replacement: Linear")#
hist(error.k, main = "MSE of Replacement: Kernel")#
dev.off()
lm.predict.point <- function(p, E, params = NULL) {#
#
  na.rows = which(is.na(apply(E,1,sum)))#
  na.cols = which(is.na(apply(E,2,sum)))#
#
  X = E[-na.rows,]#
  X = t(X[,-c(na.cols,p[2])])#
  Y = E[p[1],-c(na.cols,p[2])]#
#
  # need to make sure that the number of variables is not more than the number of points#
  S = svd(X)#
  X = X %*% S$v#
  dx = dim(X)[2]#
  X = X[,1:(dx -2)]#
#
  m = lm(Y ~ X)#
#
  x = E[-na.rows,p[2]]#
  x = x %*% S$v#
  x = x[1:(dx -2)]#
  x = data.frame(X=I(matrix(x, nrow=1)))#
  z = predict(m,newdata=x)#
  names(z) = NULL#
  return(z)#
}
error.l = apply(pset, 3, prediction.error, D, lm.predict.point)
summary(error.l)
pdf("iVAT-missing-values-error.pdf", width = 10, height = 10)#
par(mfrow = c(2,2))#
hist(error.u, main = "MSE of Replacement: Uniform")#
hist(error.b, main = "MSE of Replacement: Bootstrap")#
hist(error.l, main = "MSE of Replacement: Linear")#
hist(error.k, main = "MSE of Replacement: Kernel")#
dev.off()#
#
summary(list(Uniform = error.u, Bootstrap = error.b, Linear = error.l, Kernel = error.k))
sapply(list(Uniform = error.u, Bootstrap = error.b, Linear = error.l, Kernel = error.k), summary)
pdf("iVAT-missing-values-error.pdf", width = 10, height = 10)#
par(mfrow = c(2,2))#
hist(error.u, main = "MSE of Replacement: Uniform")#
hist(error.b, main = "MSE of Replacement: Bootstrap")#
hist(error.l, main = "MSE of Replacement: Linear Model")#
hist(error.k, main = "MSE of Replacement: Kernel Smoothing")#
dev.off()
pdf("iVAT-missing-values-error.pdf", width = 10, height = 10)#
par(mfrow = c(2,2))#
hist(error.u, main = "MSE of Replacement: Uniform", xlab = "MSE")#
hist(error.b, main = "MSE of Replacement: Bootstrap", xlab = "MSE")#
hist(error.l, main = "MSE of Replacement: Linear Model", xlab = "MSE")#
hist(error.k, main = "MSE of Replacement: Kernel Smoothing", xlab = "MSE")#
dev.off()
pdf("iVAT-missing-values-error.pdf", width = 10, height = 10)#
par(mfrow = c(2,2))#
hist(log(error.u), main = "MSE of Replacement: Uniform", xlab = "MSE")#
hist(log(error.b), main = "MSE of Replacement: Bootstrap", xlab = "MSE")#
hist(log(error.l), main = "MSE of Replacement: Linear Model", xlab = "MSE")#
hist(log(error.k), main = "MSE of Replacement: Kernel Smoothing", xlab = "MSE")#
dev.off()
pdf("iVAT-missing-values-error.pdf", width = 10, height = 10)#
par(mfrow = c(2,2))#
hist(error.u, main = "MSE of Replacement: Uniform", xlab = "MSE")#
hist(error.b, main = "MSE of Replacement: Bootstrap", xlab = "MSE")#
hist(error.l, main = "MSE of Replacement: Linear Model", xlab = "MSE")#
hist(error.k, main = "MSE of Replacement: Kernel Smoothing", xlab = "MSE")#
dev.off()
t.test(error.u, error.b, paired = TRUE, alternative="g")
t.test(error.b, error.l, paired = TRUE, alternative="g")
t.test(error.l, error.k, paired = TRUE, alternative="g")
